<?php

require_once 'dbfe/Frontend.php';

require_once 'pages/welcome.php';
require_once 'pages/members.php';
require_once 'pages/tournaments.php';
require_once 'pages/enums.php';
require_once 'pages/download.php';

include 'config.php';

$pdo = new PDO(sprintf('mysql:dbname=%s;host=%s;charset=utf8', $DB_CONNECTION['db'], $DB_CONNECTION['server']),
                        $DB_CONNECTION['user'], $DB_CONNECTION['pw'] );

/*
 * LabelHandler: per default, dbfe will label all form input fields according the columns names in the database.
 * Typically you want to set different labels in the presented form, for better usability.
 * For that, the \dbfe\LabelHandlerIf mechanism is available. A label handler needs to provide 
 * a callback get($key, $subject) which shall return the label to apply. 
 * In case of input field labels, this handler will be called as
 * $lblHdl->get( $column_name, $table_name );
 * The LabelHandlerIf is also used for all the generic texts generated by dbfe, e.g. the caption of the "save" button.
 * dbfe already provides possible implementation of the LabelHandlerIf: dbLabelHandler. This implementation will store
 * all labels in a single table in the database it is handling. This way you can even edit all the labels directly 
 * from within the web interface, by implementing a dedicated page for the labels table.
 */
$lblHdl = new \dbfe\dbLabelHandler($pdo, 'labels');

/*
 * page selection needs to be set up by you in the integration script (this file)
 * in this demo we simply use the path_info and list all known pages in an array
 */
$pages = [ 'members', 'tournaments', 'enums', 'download' ];

/* find the selected page via path info, default to welcome page if none found */
$page_path = explode("/", $_SERVER['PATH_INFO']??'')[1] ?? '';
$page_name = in_array($page_path, $pages)? $page_path : 'welcome';

/* construct the dbfe page */
/**@var $page \dbfe\dbfeIf */
$page = new $page_name( [ 'pdo' => $pdo, 'selflink' => $_SERVER['SCRIPT_NAME'].'/'.$page_name, 'label_hdl' => $lblHdl ] );

/*
 * After page creation, the following methods should at least be called, in this order:
 * 
 * $page->input();
 * if( $page->printHeader() ) 
 * {
 *    $page->output();
 * }
 * 
 * $page->printHeader() will print the http header. In case no actual page output shall be generated
 * (e.g. because a redirection header was printed out), false is returned by this method.
 * 
 * You need to create the html code around $page-output() yourself. dbfe will only take care about the
 * actual <form>...</form> code of the database interface.
 */

/* process input */
$input_valid = $page->input();

/** @var $url_parts array[string] path and script name of this instance, to build any related links in the output */
preg_match( '@^(?<uripath>.*/)(?<script>[^/?]+)$@', $_SERVER['SCRIPT_NAME'], $url_parts );

?>
<? if( $page->printHeader() ): ?>
<!DOCTYPE HTML>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>dbfe demo</title>
  <link rel="stylesheet" type="text/css" href="<?=$url_parts['uripath']?>css/demo.css" />
</head>

<body>
<header>
  <h1><?=$page->getTitle()?></h1>
</header>

<main>
<? if( $input_valid !== null ): ?>

<?   if( $input_valid ):        ?>
<p class="ok">Data stored!</p>
<?   else:                    ?>
<p class="error">Input error!</p>
<?     if( $page->getErrorMessage() !== null ): ?>
<p class="error"><?=$page->getErrorMessage()?></p>
<?     endif                  ?>
<?   endif                    ?>
<? endif                      ?>

<? $page->output() ?>

</main>

<nav>
<ul>
  <li><a href="<?=$_SERVER['SCRIPT_NAME']?>">Start</a></li>
  <li><a href="<?=$_SERVER['SCRIPT_NAME']?>/members">Members</a></li>
  <li><a href="<?=$_SERVER['SCRIPT_NAME']?>/tournaments">Tournaments</a></li>
  <li><a href="<?=$_SERVER['SCRIPT_NAME']?>/enums">Configurations</a></li>
</ul>
</nav>

</body>
</html>
<? endif ?>
